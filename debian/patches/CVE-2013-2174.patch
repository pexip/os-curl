Description: fix denial of service and possible code execution via
 heap overflow in URL decoder
Origin: upstream, https://github.com/bagder/curl/commit/192c4f788d48f82c03e9cef40013f34370e90737
Origin: upstream, https://github.com/bagder/curl/commit/0de7249bb39a2738a277c438b2bb1252ab8243cd
Origin: upstream, https://github.com/bagder/curl/commit/6fab0bd9f163430254259f6b7d5c75b5452257d3

Index: curl-7.22.0/lib/escape.c
===================================================================
--- curl-7.22.0.orig/lib/escape.c	2013-06-27 14:07:54.694005950 -0400
+++ curl-7.22.0/lib/escape.c	2013-06-27 14:07:54.690005950 -0400
@@ -159,7 +159,8 @@
 
   while(--alloc > 0) {
     in = *string;
-    if(('%' == in) && ISXDIGIT(string[1]) && ISXDIGIT(string[2])) {
+    if(('%' == in) && (alloc > 2) &&
+       ISXDIGIT(string[1]) && ISXDIGIT(string[2])) {
       /* this is two hexadecimal digits following a '%' */
       char hexstr[3];
       char *ptr;
Index: curl-7.22.0/tests/data/Makefile.am
===================================================================
--- curl-7.22.0.orig/tests/data/Makefile.am	2013-06-27 14:07:54.694005950 -0400
+++ curl-7.22.0/tests/data/Makefile.am	2013-06-27 14:08:19.486005713 -0400
@@ -75,7 +75,7 @@
 test1126 test1127 test1128 test1129 test1130 test1131 test1200 test1201	\
 test1202 test1203 test1300 test1301 test1302 test1303 test1304 test1305	\
 test1306 test1307 test1308 test1309 test1310 test1311 test1312 test1313 \
-test2000 test2001 test2002 test2003 test2004
+test2000 test2001 test2002 test2003 test2004 test1396
 
 EXTRA_DIST = $(TESTCASES) DISABLED
 
Index: curl-7.22.0/tests/data/test1396
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ curl-7.22.0/tests/data/test1396	2013-06-27 14:07:54.690005950 -0400
@@ -0,0 +1,27 @@
+<testcase>
+<info>
+<keywords>
+unittest
+curl_easy_escape
+curl_easy_unescape
+</keywords>
+</info>
+
+#
+# Client-side
+<client>
+<server>
+none
+</server>
+<features>
+unittest
+</features>
+ <name>
+curl_easy_escape and curl_easy_unescape
+ </name>
+<tool>
+unit1396
+</tool>
+</client>
+
+</testcase>
Index: curl-7.22.0/tests/unit/Makefile.inc
===================================================================
--- curl-7.22.0.orig/tests/unit/Makefile.inc	2013-06-27 14:07:54.694005950 -0400
+++ curl-7.22.0/tests/unit/Makefile.inc	2013-06-27 14:07:54.690005950 -0400
@@ -6,7 +6,7 @@
 
 # These are all unit test programs
 UNITPROGS = unit1300 unit1301 unit1302 unit1303 unit1304 unit1305 unit1307 \
- unit1308 unit1309
+ unit1308 unit1309 unit1396
 
 unit1300_SOURCES = unit1300.c $(UNITFILES)
 unit1301_SOURCES = unit1301.c $(UNITFILES)
@@ -17,3 +17,4 @@
 unit1307_SOURCES = unit1307.c $(UNITFILES)
 unit1308_SOURCES = unit1308.c $(UNITFILES)
 unit1309_SOURCES = unit1309.c $(UNITFILES)
+unit1396_SOURCES = unit1396.c $(UNITFILES)
Index: curl-7.22.0/tests/unit/unit1396.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ curl-7.22.0/tests/unit/unit1396.c	2013-06-27 14:07:54.690005950 -0400
@@ -0,0 +1,109 @@
+/***************************************************************************
+ *                                  _   _ ____  _
+ *  Project                     ___| | | |  _ \| |
+ *                             / __| | | | |_) | |
+ *                            | (__| |_| |  _ <| |___
+ *                             \___|\___/|_| \_\_____|
+ *
+ * Copyright (C) 1998 - 2013, Daniel Stenberg, <daniel@haxx.se>, et al.
+ *
+ * This software is licensed as described in the file COPYING, which
+ * you should have received as part of this distribution. The terms
+ * are also available at http://curl.haxx.se/docs/copyright.html.
+ *
+ * You may opt to use, copy, modify, merge, publish, distribute and/or sell
+ * copies of the Software, and permit persons to whom the Software is
+ * furnished to do so, under the terms of the COPYING file.
+ *
+ * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
+ * KIND, either express or implied.
+ *
+ ***************************************************************************/
+#include "curlcheck.h"
+
+static CURLcode unit_setup(void)
+{
+  return CURLE_OK;
+}
+
+static void unit_stop(void)
+{
+}
+
+struct test {
+  const char *in;
+  int inlen;
+  const char *out;
+  int outlen;
+};
+
+UNITTEST_START
+{
+  /* unescape, this => that */
+  struct test list1[]={
+    {"%61", 3, "a", 1},
+    {"%61a", 4, "aa", 2},
+    {"%61b", 4, "ab", 2},
+    {"%6 1", 4, "%6 1", 4},
+    {"%61", 1, "%", 1},
+    {"%61", 2, "%6", 2},
+    {"%6%a", 4, "%6%a", 4},
+    {"%6a", 0, "j", 1},
+    {"%FF", 0, "\xff", 1},
+    {"%FF%00%ff", 9, "\xff\x00\xff", 3},
+    {"%-2", 0, "%-2", 3},
+    {"%FG", 0, "%FG", 3},
+    {NULL, 0, NULL, 0} /* end of list marker */
+  };
+  /* escape, this => that */
+  struct test list2[]={
+    {"a", 1, "a", 1},
+    {"/", 1, "%2F", 3},
+    {"a=b", 3, "a%3Db", 5},
+    {"a=b", 0, "a%3Db", 5},
+    {"a=b", 1, "a", 1},
+    {"a=b", 2, "a%3D", 4},
+    {"1/./0", 5, "1%2F.%2F0", 9},
+    {"-._~!#%&", 0, "-._~%21%23%25%26", 16},
+    {"a", 2, "a%00", 4},
+    {"a\xff\x01g", 4, "a%FF%01g", 8},
+    {NULL, 0, NULL, 0} /* end of list marker */
+  };
+  int i;
+  CURL *hnd;
+
+  hnd = curl_easy_init();
+  for(i=0; list1[i].in; i++) {
+    int outlen;
+    char *out = curl_easy_unescape(hnd,
+                                   list1[i].in, list1[i].inlen,
+                                   &outlen);
+
+    fail_unless(out != NULL, "returned NULL!");
+    fail_unless(outlen == list1[i].outlen, "wrong output length returned");
+    fail_unless(!memcmp(out, list1[i].out, list1[i].outlen),
+                "bad output data returned");
+
+    printf("curl_easy_unescape test %d DONE\n", i);
+
+    curl_free(out);
+  }
+
+  for(i=0; list2[i].in; i++) {
+    char *out = curl_easy_escape(hnd, list2[i].in, list2[i].inlen);
+    int outlen = (int)strlen(out);
+
+    fail_unless(out != NULL, "returned NULL!");
+    fail_unless(outlen == list2[i].outlen, "wrong output length returned");
+    fail_unless(!memcmp(out, list2[i].out, list2[i].outlen),
+                "bad output data returned");
+
+    printf("curl_easy_escape test %d DONE (%s)\n", i, out);
+
+    curl_free(out);
+  }
+
+  curl_easy_cleanup(hnd);
+
+}
+UNITTEST_STOP
