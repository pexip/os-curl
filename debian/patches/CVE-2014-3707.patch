Description: fix sensitive data disclosure via duphandle read out of bounds
Origin: backport, https://github.com/bagder/curl/commit/b3875606925536f82fc61f3114ac42f29eaf6945
Origin: backport, https://github.com/bagder/curl/commit/e8cea8d70fed7ad5e14d8b3e871ebf0ea0bf53b0
Origin: backport, https://github.com/bagder/curl/commit/92e7e346f35b89d89c079403e5aeb16bee0e8836
Origin: backport, https://github.com/bagder/curl/commit/8a2dda312cc916e3ec3d0bc99850d9abe5ae6b92

Index: curl-7.22.0/lib/formdata.c
===================================================================
--- curl-7.22.0.orig/lib/formdata.c	2011-09-05 16:29:22.000000000 -0400
+++ curl-7.22.0/lib/formdata.c	2014-11-06 11:23:43.848849981 -0500
@@ -39,6 +39,7 @@
 #include "strequal.h"
 #include "curl_memory.h"
 #include "sendf.h"
+#include "strdup.h"
 
 #define _MPRINTF_REPLACE /* use our functions only */
 #include <curl/mprintf.h>
@@ -218,46 +219,6 @@
 
 /***************************************************************************
  *
- * memdup()
- *
- * Copies the 'source' data to a newly allocated buffer buffer (that is
- * returned). Uses buffer_length if not null, else uses strlen to determine
- * the length of the buffer to be copied
- *
- * Returns the new pointer or NULL on failure.
- *
- ***************************************************************************/
-static char *memdup(const char *src, size_t buffer_length)
-{
-  size_t length;
-  bool add = FALSE;
-  char *buffer;
-
-  if(buffer_length)
-    length = buffer_length;
-  else if(src) {
-    length = strlen(src);
-    add = TRUE;
-  }
-  else
-    /* no length and a NULL src pointer! */
-    return strdup("");
-
-  buffer = malloc(length+add);
-  if(!buffer)
-    return NULL; /* fail */
-
-  memcpy(buffer, src, length);
-
-  /* if length unknown do null termination */
-  if(add)
-    buffer[length] = '\0';
-
-  return buffer;
-}
-
-/***************************************************************************
- *
  * FormAdd()
  *
  * Stores a formpost parameter and builds the appropriate linked list.
@@ -637,9 +598,12 @@
            (form == first_form) ) {
           /* Note that there's small risk that form->name is NULL here if the
              app passed in a bad combo, so we better check for that first. */
-          if(form->name)
+          if(form->name) {
             /* copy name (without strdup; possibly contains null characters) */
-            form->name = memdup(form->name, form->namelength);
+            form->name = Curl_memdup(form->name, form->namelength?
+                                     form->namelength:
+                                     strlen(form->name)+1);
+          }
           if(!form->name) {
             return_value = CURL_FORMADD_MEMORY;
             break;
@@ -650,7 +614,9 @@
                             HTTPPOST_PTRCONTENTS | HTTPPOST_PTRBUFFER |
                             HTTPPOST_CALLBACK)) ) {
           /* copy value (without strdup; possibly contains null characters) */
-          form->value = memdup(form->value, form->contentslength);
+          form->value = Curl_memdup(form->value, form->contentslength?
+                                    form->contentslength:
+                                    strlen(form->value)+1);
           if(!form->value) {
             return_value = CURL_FORMADD_MEMORY;
             break;
Index: curl-7.22.0/lib/strdup.c
===================================================================
--- curl-7.22.0.orig/lib/strdup.c	2011-08-09 07:21:47.000000000 -0400
+++ curl-7.22.0/lib/strdup.c	2014-11-06 11:24:55.613424792 -0500
@@ -23,6 +23,10 @@
 #include "setup.h"
 
 #include "strdup.h"
+#include "curl_memory.h"
+
+/* The last #include file should be: */
+#include "memdebug.h"
 
 #ifndef HAVE_STRDUP
 char *curlx_strdup(const char *str)
@@ -48,3 +52,24 @@
 
 }
 #endif
+
+/***************************************************************************
+ *
+ * Curl_memdup(source, length)
+ *
+ * Copies the 'source' data to a newly allocated buffer (that is
+ * returned). Copies 'length' bytes.
+ *
+ * Returns the new pointer or NULL on failure.
+ *
+ ***************************************************************************/
+char *Curl_memdup(const char *src, size_t length)
+{
+  char *buffer = malloc(length);
+  if(!buffer)
+    return NULL; /* fail */
+
+  memcpy(buffer, src, length);
+
+  return buffer;
+}
Index: curl-7.22.0/lib/strdup.h
===================================================================
--- curl-7.22.0.orig/lib/strdup.h	2011-03-19 11:16:07.000000000 -0400
+++ curl-7.22.0/lib/strdup.h	2014-11-06 11:23:43.848849981 -0500
@@ -26,5 +26,6 @@
 #ifndef HAVE_STRDUP
 extern char *curlx_strdup(const char *str);
 #endif
+char *Curl_memdup(const char *src, size_t buffer_length);
 
 #endif /* HEADER_CURL_STRDUP_H */
Index: curl-7.22.0/lib/url.c
===================================================================
--- curl-7.22.0.orig/lib/url.c	2014-11-06 11:23:30.000000000 -0500
+++ curl-7.22.0/lib/url.c	2014-11-06 11:25:49.925859315 -0500
@@ -124,6 +124,7 @@
 #include "socks.h"
 #include "curl_rtmp.h"
 #include "gopher.h"
+#include "strdup.h"
 
 #define _MPRINTF_REPLACE /* use our functions only */
 #include <curl/mprintf.h>
@@ -266,8 +267,9 @@
 {
   /* Free all dynamic strings stored in the data->set substructure. */
   enum dupstring i;
-  for(i=(enum dupstring)0; i < STRING_LAST; i++)
+  for(i=(enum dupstring)0; i < STRING_LAST; i++) {
     Curl_safefree(data->set.str[i]);
+  }
 }
 
 static CURLcode setstropt(char **charp, char * s)
@@ -346,14 +348,25 @@
   memset(dst->set.str, 0, STRING_LAST * sizeof(char *));
 
   /* duplicate all strings */
-  for(i=(enum dupstring)0; i< STRING_LAST; i++) {
+  for(i=(enum dupstring)0; i< STRING_LASTZEROTERMINATED; i++) {
     r = setstropt(&dst->set.str[i], src->set.str[i]);
     if(r != CURLE_OK)
-      break;
+      return r;
   }
 
-  /* If a failure occurred, freeing has to be performed externally. */
-  return r;
+  /* duplicate memory areas pointed to */
+  i = STRING_COPYPOSTFIELDS;
+  if(src->set.postfieldsize && src->set.str[i]) {
+    /* postfieldsize is curl_off_t, Curl_memdup() takes a size_t ... */
+    dst->set.str[i] = Curl_memdup(src->set.str[i],
+                                  curlx_sotouz(src->set.postfieldsize));
+    if(!dst->set.str[i])
+      return CURLE_OUT_OF_MEMORY;
+    /* point to the new copy */
+    dst->set.postfields = dst->set.str[i];
+  }
+
+  return CURLE_OK;
 }
 
 /*
Index: curl-7.22.0/lib/urldata.h
===================================================================
--- curl-7.22.0.orig/lib/urldata.h	2014-11-06 11:23:30.000000000 -0500
+++ curl-7.22.0/lib/urldata.h	2014-11-06 11:23:43.852850013 -0500
@@ -1296,7 +1296,6 @@
   STRING_KRB_LEVEL,       /* krb security level */
   STRING_NETRC_FILE,      /* if not NULL, use this instead of trying to find
                              $HOME/.netrc */
-  STRING_COPYPOSTFIELDS,  /* if POST, set the fields' values here */
   STRING_PROXY,           /* proxy to use */
   STRING_SET_RANGE,       /* range, if used */
   STRING_SET_REFERER,     /* custom string for the HTTP referer field */
@@ -1334,7 +1333,15 @@
   STRING_TLSAUTH_PASSWORD,     /* TLS auth <password> */
 #endif
 
-  /* -- end of strings -- */
+  /* -- end of zero-terminated strings -- */
+
+  STRING_LASTZEROTERMINATED,
+
+  /* -- below this are pointers to binary data that cannot be strdup'ed.
+     Each such pointer must be added manually to Curl_dupset() --- */
+
+  STRING_COPYPOSTFIELDS,  /* if POST, set the fields' values here */
+
   STRING_LAST /* not used, just an end-of-list marker */
 };
 
Index: curl-7.22.0/src/Makefile.inc
===================================================================
--- curl-7.22.0.orig/src/Makefile.inc	2011-03-19 11:17:15.000000000 -0400
+++ curl-7.22.0/src/Makefile.inc	2014-11-06 11:26:08.982011674 -0500
@@ -10,7 +10,6 @@
 # libcurl has sources that provide functions named curlx_* that aren't part of
 # the official API, but we re-use the code here to avoid duplication.
 CURLX_ONES = $(top_srcdir)/lib/strtoofft.c \
-	$(top_srcdir)/lib/strdup.c \
 	$(top_srcdir)/lib/rawstr.c \
 	$(top_srcdir)/lib/nonblock.c
 
